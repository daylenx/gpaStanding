//------------------------------------------------------------------
// File name:   standing.cpp
// Assign ID:   PROG5
// Author:      hallD241 Daylen Hall
//
// Purpose:     Read student data from input file, reformat data and
//              compute the average GPA and weighted (by cumHours) GPA.
//
// Input Line:  ID Firstname MiddleInit Courseload CumHours GPA 
//
//
// Sample Output:  
//
//       ACADEMIC STANDING REPORT
//
//       1234bb123456789bb1234bb12345bbb1234567890123bb      (yardstick)
//       ====  =========  ====  =====   =============  ==================
//       ====  =========  ====  =====   =============  ========================
//        GPA  StudentID  Load  Hours   Standing       Student_Name
//       ====  =========  ====  =====   =============  ========================
//       2.52  143841138    18    112   GOOD STANDING  Jones, Edward L
//       1.99  411384112    12     67   ON PROBATION   Frugal, Miser X
//       3.83  118113428     6     31   HONORS         Sapp, Marilyn Q
//       ====  =========  ====  =====   =============  ==================
//
//       Number of Students =  3
//       12bxxxxxxxxxxxxxxxxxxxxxxxxx    (yardstick)
//        1 Students in Good Standing
//        1 Students On Probation
//        1 Honors Students
//
//       Average Student GPA  = 2.779
//       Weighted Average GPA = 2.544
//
//-------------------------------------------------------------------
// 
//       STUDENT GPA REPORT
//
//       1234xx123456789xx1234xx12345xxx123456789012345678901234 (yardstick)
//       ====  =========  ====  =====   ========================
//        GPA  StudentID  Load  Hours   Student_Name
//       ====  =========  ====  =====   ========================
//       2.52  143841138    18    112   Jones, Edward L
//       1.99  411384112    12     67   Frugal, Miser X
//       3.83  118113428     6     31   Sapp, Marilyn Q
//       ====  =========  ====  =====   ========================
//
//       Number of Students =  3
//       Average Student GPA  = 2.779
//       Weighted Average GPA = 2.544
//            Note: WEIGHTED AVERAGE is OPTIONAL/BONUS.
//
//-------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <iomanip>
using namespace std;

int main()
{

   // -----------------------------------------------------------
   // Declare input variables for student data.
   // -----------------------------------------------------------
    
    float gpa,            // Student one gpa.
          gpaTwo,         // Student two gpa.
          gpaThree,       // Student thre gpa. 
          avgGPA,         // Average student gpa. 
          weighedGPA,     // Weighted gpa.
          qualityOne,
          qualityTwo,
          qualityThree,
          qualityTotal,
          qualityPoints;  // Quality Points. 

    int numStudents,      // Number of students. 
        studentId,        // Student one ID. 
        studentIdTwo,     // Student two ID. 
        studentIdThree,   // Student three ID. 
        courseLoad,       // Course load student one. 
        courseLoadTwo,    // Course load student two. 
        courseLoadThree,  // Course load student three.
        totalClasses,     // Total classes. 
        cumHours,         // Cumalative number of hours student one. 
        cumHoursTwo,      // Cumalative number of hours student two. 
        cumHoursThree,    // Cumalative number of hours student three.
        eHours;       // Total hours for all students. 

    string fName,         // Student first name student one. 
           lName,         // Student last name student one. 
           mInitial,      // Student middle inital student one.
           fNameTwo,      // Student first name student two 
           lNameTwo,     // Student last name student two.
           mInitialTwo,   // Student middle initial student two.
           fNameThree,    // Student first name student one. 
           lNameThree,    // Student last name student two.
           mInitialThree; // Student middle initial student three.


   // -----------------------------------------------------------
   // Declare counters and sums.
   // -----------------------------------------------------------
    
    int honorsCount, 
        goodCount,
        probationCount,
        studentCount;

    float gpaSum; // Sum of the GPA's.  


   // -----------------------------------------------------------
   // Declare calculation variables student data.
   // -----------------------------------------------------------
   
   string Standing,
          StandingTwo,
          StandingThree;      // Standing: "HONORS"  or "GOOD STANDING"
                              //           or "ON PROBATION"-

   
   //-|-----------------------------------------------------------
   //-| Display copyright notice ON SCREEN only..
   //-|-----------------------------------------------------------

    cout << endl << "(c) 2022,  hallD241 Daylen Hall" << endl << endl;


   //-|-----------------------------------------------------------
   //-| 1. Open output file.
   //-|-----------------------------------------------------------
  
    ofstream rptF("students.rpt");

   //-|-----------------------------------------------------------
   //-| 2. Open input file. On failure, display error message
   //-|       FATAL ERROR .. can not open input file 'xxxx'.
   //-|    and terminate program.
   //-|-----------------------------------------------------------

    ifstream studF("students.dat");

    if (studF.fail())
    {
        cout << endl << "FATAL ERROR: can not OPEN file 'students.dat'." << endl;
        exit(1);
    }

   //-|-----------------------------------------------------------
   //-| 3. Initialize all counters and sums to zero. 
   //-|-----------------------------------------------------------

    honorsCount = 0; 
    goodCount = 0;
    probationCount = 0;
    studentCount = 0;
    gpaSum = 0;

   //-|-----------------------------------------------------------
   //-| 4. Write GPA REPORT headings to report file.
   //-|-----------------------------------------------------------
   
   rptF << "STUDENT GPA REPORT" << endl << endl; 

   rptF << "====  =========  ====  =====   ========================" << endl;
   rptF << " GPA  " << "StudentID  " << "Load  " << "Hours " << "  Student_Name  " << endl;
   rptF << "====  =========  ====  =====   ========================" << endl;
   

   //-|-----------------------------------------------------------
   //-| 5. Write ACADEMIC STANDING REPORT headings to screen.
   //-|-----------------------------------------------------------
   
   cout << "ACADEMIC STANDING REPORT" << endl << endl << endl; 

   cout << "====  =========  ====  =====   =============  =================="  << endl;
   cout << " GPA " << " StudentID  " << "Load  " << "Hours  " << " Standing  " << "     Student_Name" << endl;
   cout << "====  =========  ====  =====   =============  ========================" << endl; 
   
   
   //-|-----------------------------------------------------------
   //-| REPEAT STEPS 6-9 three times.
   //-|-----------------------------------------------------------
   


   //-|-----------------------------------------------------------
   //-| 6. Read student data and update counts and sums.
   //-|-----------------------------------------------------------
   //-|    a) Read student data. 
   //-|    b) Count student. 
   //-|    c) Update GPA_Sum. 
   //-|    d) Update wtGPA_Sum. 
   //-|    e) Update cumHours_Sum. 
   //-|-----------------------------------------------------------

    studF >> studentId >> fName >> mInitial >> lName >> courseLoad 
    >> cumHours >> gpa;

    studentCount ++;

    gpaSum += gpa;

    studF >> studentIdTwo >> fNameTwo >> mInitialTwo >> lNameTwo 
    >> courseLoadTwo >> cumHoursTwo >> gpaTwo;

    studentCount ++;

    gpaSum += gpa;

    studF >> studentIdThree >> fNameThree >> mInitialThree >> lNameThree 
    >> courseLoadThree >> cumHoursThree >> gpaThree;

    studentCount ++;

    gpaSum += gpa;

   
   //-|-----------------------------------------------------------
   //-| 7. DETERMINE status of student. 
   //-|    7.1 if GPA >= 3.0 
   //-|          Standing = "HONORS"
   //-|          honorsCount++ 
   //-|   7.2 else if GPA < 2.0
   //-|          Standing = "ON PROBATION"
   //-|          probationCount++ 
   //-|   7.3 else 
   //-|          Standing = "GOOD""
   //-|          goodCount++ 
   //-|-----------------------------------------------------------
    
    if (gpa >= 3.0)
    {
        Standing = "HONORS";
        honorsCount++;
    } 
    else if (gpa < 2.0)
    {
        Standing = "ON PROBATION";
        probationCount++;
    }
    else 
    {
        Standing = "GOOD";
        goodCount++;
    }

    if (gpaTwo >= 3.0)
    {
        StandingTwo = "HONORS";
        honorsCount++;
    } 
    else if (gpaTwo < 2.0)
    {
        StandingTwo = "ON PROBATION";
        probationCount++;
    }
    else 
    {
        StandingTwo = "GOOD";
        goodCount++;
    }

    if (gpaThree >= 3.0)
    {
        StandingThree = "HONORS";
        honorsCount++;
    } 
    else if (gpaThree < 2.0)
    {
        StandingThree = "ON PROBATION";
        probationCount++;
    }
    else 
    {
        StandingThree = "GOOD";
        goodCount++;
    }
    
   //-|-----------------------------------------------------------
   //-| 8. Write standings record to screen.
   //-|-----------------------------------------------------------

    cout << setfill(' ');
    cout << fixed << showpoint << setprecision(2);

    cout << setw(4) << left << setprecision(2) << gpa << "  ";
    cout << setw(9) << studentId << "  ";
    cout << setw(4) << right << courseLoad << "  ";
    cout << setw(5) << right << cumHours << "   ";
    cout << setw(13) << left << Standing << "  ";
    cout << lName << ", " << fName << " " << mInitial << setw(20) 
    << right << endl;

    cout << setw(4) << left << setprecision(2) << gpaTwo << "  ";
    cout << setw(9) << studentIdTwo << "  ";
    cout << setw(4) << right << courseLoadTwo << "  ";
    cout << setw(5) << right << cumHoursTwo << "   ";
    cout << setw(13) << left << StandingTwo << "  ";
    cout << lNameTwo << ", " << fNameTwo << " " << mInitialTwo 
    << setw(20) << right << endl;

    cout << setw(4) << left << setprecision(2) << gpaThree << "  ";
    cout << setw(9) << studentIdThree << "  ";
    cout << setw(4) << right << courseLoadThree << "  ";
    cout << setw(5) << right << cumHoursThree << "   ";
    cout << setw(13) << left << StandingThree << "  "; 
    cout << lNameThree << ", " << fNameThree << " " << mInitialThree 
    << setw(20) << right << endl;


    
   //-|-----------------------------------------------------------
   //-| 9. Write GPA Report record to report file.
   //-|-----------------------------------------------------------

    rptF << fixed << showpoint << setprecision(2);

    rptF << setw(4) << right << setprecision(2) << gpa << "  ";
    rptF << setw(9) << studentId << "  ";
    rptF << setw(4) << right << courseLoad << "  ";
    rptF << setw(5) << right << cumHours << "   ";
    rptF << lName << ", " << fName << " " << mInitial << setw(24) 
    << right << endl;

    rptF << setw(4) << right << setprecision(2) << gpaTwo << "  ";
    rptF << setw(9) << studentIdTwo << "  ";
    rptF << setw(4) << right << courseLoadTwo << "  ";
    rptF << setw(5) << right<< cumHoursTwo << "   ";
    rptF << lNameTwo << ", " << fNameTwo << " " << mInitialTwo 
    << setw(24) << right << endl;

    rptF << setw(4) << right << setprecision(2) << gpaThree << "  ";
    rptF << setw(9) << studentIdThree << "  ";
    rptF << setw(4) << right << courseLoadThree << "  ";
    rptF << setw(5) << right<< cumHoursThree << "   ";
    rptF << lNameThree << ", " << fNameThree << " " << mInitialThree 
    << setw(24) << right << endl << endl;

   
   //-|-----------------------------------------------------------
   //-| 10. Write statistics to GPA Report file.
   //-|-----------------------------------------------------------
   //-|    - Number of Students 
   //-|    - Average Student GPA
   //-|    -  Weighted Average GPA
   //-|-----------------------------------------------------------

    cout << fixed << showpoint << setprecision(3);
    rptF << fixed << showpoint << setprecision(3);


   if (studentCount > 0)
   {
       avgGPA = (gpa + gpaTwo + gpaThree) / studentCount;
   }
    else 
    avgGPA = 0; 

   qualityOne = gpa * cumHours;
   qualityTwo = gpaTwo * cumHoursTwo;
   qualityThree = gpaThree * cumHoursThree;

   eHours = cumHours + cumHoursThree + cumHoursTwo;

   qualityTotal = qualityOne + qualityTwo + qualityThree;

   weighedGPA = qualityTotal / eHours;

   rptF << "Number of Students =  " << studentCount << endl;

   rptF << "Average Student GPA  = " << fixed << showpoint << setprecision(3) << avgGPA << endl; 
   rptF << "Weighted Average GPA = " << fixed << showpoint << setprecision(3) << weighedGPA; 



   
   //-|-----------------------------------------------------------
   //-| 11. Write Academic Standings reprt statistics to screen.
   //-|-----------------------------------------------------------
   //-|    - Number of Students 
   //-|    - #Students in Good Standing
   //-|    - #Students On Probation
   //-|    - #Honors Students   
   //-|    - Average Student GPA
   //-|    - Weighted Average GPA
   //-|-----------------------------------------------------------
  
   cout << endl << endl;

   cout << setfill(' ');

   cout << "Number of Students =  " << studentCount << endl << endl; 

   cout << setw(2) << right << honorsCount << setw(25) << left 
   << " Honors Students" << endl;

   cout << setw(2) << right << goodCount << setw(25) << left 
   << " Students in Good Standing" << endl;

   cout << setw(2) << right << probationCount << setw(25) << left 
   << " Students On Probation" << endl << endl;

   cout << "Average Student GPA  = " << fixed << showpoint << setprecision(3) << avgGPA << endl; 

   cout <<"Weighted Average GPA = " << weighedGPA;

   //-|-----------------------------------------------------------
   //-| 12. Write copyright notice to GPA report file..
   //-|-----------------------------------------------------------

   rptF << endl << endl << "(c) 2022,  hallD241 Daylen Hall" << endl << endl;

   //-|-----------------------------------------------------------
   //-| 13. Close all files.
   //-|-----------------------------------------------------------

    rptF.close();
    studF.close();


  cout << endl;
  return 0;
}//main	
